#!/usr/bin/bash
#
# vts.rc.local.engine - This script is executed by the system /etc/rc.local script on system boot

export VTS_MODULE="engine"

source /root/bin/vts.root.profile

rm -f /tmp/rfcomm-bind /tmp/btctl-connect

# Enable Bluetooth subsystem
bluetoothctl power on
bluetoothctl agent on

# Give Bluetooth subsystem more time to activate
sleep 45

## Bind the available paired OBDII device to /dev/rfcomm0.
## Change the Bluetooth MAC addresses in the next line to match your addresses.
## One or more MAC addresses matching available Bluetooth OBD devices are required.
## The following tries MAC addresses until a working one is found.
## To make more than one attempt at each/any Bluetooth MAC address, duplicate the address(es) as shown below.
export RtnCode=1
for BT_MAC_ADDR in "${VTS_BT_MAC_ADDRESS}" "${VTS_BT_MAC_ADDRESS}"  "${VTS_BT_MAC_ADDRESS}" "${VTS_BT_MAC_ADDRESS}" "${VTS_BT_MAC_ADDRESS}" "${VTS_BT_MAC_ADDRESS}"
do
	bluetoothctl connect "${BT_MAC_ADDR}" 2>&1 >> /tmp/btctl-connect
	grep "Connected: yes" /tmp/btctl-connect
	RtnCode="$?"

	if [ "${RtnCode}" -eq 0 ]
	then
			rfcomm bind rfcomm0 "${BT_MAC_ADDR}" 2>&1 >> /tmp/rfcomm-bind
			break
	fi
	echo "${BT_MAC_ADDR}" '##########################' >> /tmp/rfcomm-bind
	echo "${BT_MAC_ADDR}" '##########################' >> /tmp/btctl-connect
	sleep 5
done

if [ "${RtnCode}" -ne 0 ]
then
	echo Exiting.  Unable to bind serial device to Bluetooth connection.  obd_logger.sh not starting.
	exit 0
fi

echo Ready to start obd_logger.sh

## Run the script obd_logger.sh as user "${VTS_USER}" and group "${VTS_GROUP}"
runuser -u "${VTS_USER}" -g dialout "${VTS_HOME}/vehicle-telemetry-system/bin/obd_logger.sh" &

exit 0
