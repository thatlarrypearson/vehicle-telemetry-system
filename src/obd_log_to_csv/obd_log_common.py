# OBD Log Common
# telemetry-obd-log-to-csv/obd_log_to_csv/obd_log_common.py
# sourcery skip: remove-duplicate-dict-key, remove-duplicate-key
"""
Data and Functions shared between different programs in the
obd_log_to_csv package.
"""

import contextlib
from sys import stderr
from pint import UnitRegistry, UndefinedUnitError, OffsetUnitCalculusError
from obd.commands import __mode1__, __mode9__
from telemetry_obd.add_commands import NEW_COMMANDS

unit_registry = UnitRegistry()

MODE_PID_TO_COMMAND = {}

COMMAND_TO_MODE_PID = {}

PSEUDO_COMMANDS = [
    'ELM_VERSION',
    'ELM_VOLTAGE',
]

# The following units aren't included in the base pint package
# and are needed to process data generated by python-obd project.
unit_registry.define("percent = [] = %")
unit_registry.define("ratio = []")
unit_registry.define("gps = gram / second = GPS = grams_per_second")
unit_registry.define("lph = liter / hour = LPH = liters_per_hour")
unit_registry.define("ppm = count / 1000000 = PPM = parts_per_million")
# unit_registry.define("degC = Centigrade")

date_time_fields = ['iso_ts_pre', 'iso_ts_post', 'duration', ]

COMMANDS_RETURNING_LIST_RESULTS = {
    'PERCENT_TORQUE': {
        0: 'Idle',
        1: 'Engine_Point_1',
        2: 'Engine_Point_2',
        3: 'Engine_Point_3',
        4: 'Engine_Point_4',
    },
    'MASS_AIR_FLOW_SENSOR': {
        0: 'sensor_a',
        1: 'sensor_b',
    },
    'ENGINE_COOLANT_TEMPERATURE': {
        0: 'sensor_a',
        1: 'sensor_b',
    },
    'INTAKE_AIR_TEMPERATURE_SENSOR': {
        0: 'sensor_a',
        1: 'sensor_b',
    },
    'FUEL_RATE_2': {
        0: 'engine_fuel_rate',
        1: 'vehicle_fuel_rate',
    },
    'TRANSMISSION_ACTUAL_GEAR': {
        0: 'gear',
        1: 'gear_ratio',
    },
    'AUXILIARY_IN_OUT_STATUS': {
        0: 'pto_output_status_supported',
        1: 'automatic_transmission_neutral_drive_status_supported',
        2: 'manual_transmission_neutral_drive_status_supported',
        3: 'glow_plug_lamp_status_supported',
        4: 'recommended_transmission_gear_supported',
        5: 'pto_output_status',
        6: 'automatic_transmission_neutral_drive_status',
        7: 'manual_transmission_neutral_drive_status',
        8: 'glow_plug_lamp_status',
        9: 'recommended_transmission_gear',
    },
    'COMMANDED_EGR_2': {
        0: 'commanded_egr_a_duty_cycle_supported',
        1: 'actual_egr_a_duty_cycle_supported',
        2: 'egr_a_error_supported',
        3: 'commanded_egr_b_duty_cycle_supported',
        4: 'actual_egr_b_duty_cycle_supported',
        5: 'egr_b_error_supported',
        6: 'commanded_egr_a_duty_cycle',
        7: 'actual_egr_a_duty_cycle',
        8: 'egr_a_error',
        9: 'commanded_egr_b_duty_cycle',
        10: 'actual_egr_b_duty_cycle',
        11: 'egr_b_error',
    },
    'COMMANDED_DIESEL_AIR_INTAKE': {
        0: 'commanded_intake_air_flow_a_control_supported',
        1: 'relative_intake_air_flow_a_position_supported',
        2: 'commanded_intake_air_flow_b_control_supported',
        3: 'relative_intake_air_flow_b_position_supported',
        4: 'commanded_intake_air_flow_a_control',
        5: 'relative_intake_air_flow_a_position',
        6: 'commanded_intake_air_flow_b_control',
        7: 'relative_intake_air_flow_b_position',
    },
    'EGR_TEMP': {
        0: 'egr_temp_bank_1_sensor_1_supported',
        1: 'egr_temp_bank_1_sensor_2_supported',
        2: 'egr_temp_bank_2_sensor_1_supported',
        3: 'egr_temp_bank_2_sensor_2_supported',
        4: 'egr_temp_bank_1_sensor_1_wide_range_supported',
        5: 'egr_temp_bank_1_sensor_2_wide_range_supported',
        6: 'egr_temp_bank_2_sensor_1_wide_range_supported',
        7: 'egr_temp_bank_2_sensor_2_wide_range_supported',
        8: 'egr_temp_bank_1_sensor_1',
        9: 'egr_temp_bank_1_sensor_2',
        10: 'egr_temp_bank_2_sensor_1',
        11: 'egr_temp_bank_2_sensor_2',
        12: 'egr_temp_bank_1_sensor_1_wide_range',
        13: 'egr_temp_bank_1_sensor_2_wide_range',
        14: 'egr_temp_bank_2_sensor_1_wide_range',
        15: 'egr_temp_bank_2_sensor_2_wide_range',
    },
    "THROTTLE": {
        0: 'commanded_throttle_actuator_a_control_supported',
        1: 'relative_throttle_a_position_supported',
        2: 'commanded_throttle_actuator_b_control_supported',
        3: 'relative_throttle_b_position_supported',
        4: 'commanded_throttle_actuator_a_control',
        5: 'relative_throttle_a_position',
        6: 'commanded_throttle_actuator_b_control',
        7: 'relative_throttle_b_position',
    },
    "FUEL_PRESSURE_CONTROL": {
        0: 'commanded_fuel_rail_pressure_a_supported',
        1: 'fuel_rail_pressure_a_supported',
        2: 'fuel_temperature_a_supported',
        3: 'commanded_fuel_rail_pressure_b_supported',
        4: 'fuel_rail_pressure_b_supported',
        5: 'fuel_temperature_b_supported',
        6: 'commanded_fuel_rail_pressure_a',
        7: 'fuel_rail_pressure_a',
        8: 'fuel_temperature_a',
        9: 'commanded_fuel_rail_pressure_b',
        10: 'fuel_rail_pressure_b',
        11: 'fuel_temperature_b',
    },
    "INJECTION_PRESSURE_CONTROL": {
        0: 'commanded_injection_control_pressure_a_supported',
        1: 'injection_control_pressure_a_supported',
        2: 'commanded_injection_control_pressure_b_supported',
        3: 'injection_control_pressure_b_supported',
        4: 'commanded_injection_control_pressure_a',
        5: 'injection_control_pressure_a',
        6: 'commanded_injection_control_pressure_b',
        7: 'injection_control_pressure_b',
    },
    "TURBO_INLET_PRESSURE": {
        0: 'turbocharger_inlet_pressure_sensor_a_supported',
        1: 'turbocharger_inlet_pressure_sensor_b_supported',
        2: 'turbocharger_inlet_pressure_sensor_a_wide_range_supported',
        3: 'turbocharger_inlet_pressure_sensor_b_wide_range_supported',
        4: 'turbocharger_inlet_pressure_sensor_a',
        5: 'turbocharger_inlet_pressure_sensor_b',
        6: 'turbocharger_inlet_pressure_sensor_a_wide_range',
        7: 'turbocharger_inlet_pressure_sensor_b_wide_range',
    },
    "BOOST_PRESSURE": {
        0: 'commanded_boost_pressure_a_supported',
        1: 'boost_pressure_sensor_a_supported',
        2: 'boost_pressure_a_control_status_supported',
        3: 'commanded_boost_pressure_b_supported',
        4: 'boost_pressure_sensor_b_supported',
        5: 'boost_pressure_b_control_status_supported',
        6: 'commanded_boost_pressure_a',
        7: 'boost_pressure_sensor_a',
        8: 'commanded_boost_pressure_b',
        9: 'boost_pressure_sensor_b',
        10: 'boost_pressure_a_control_status',
        11: 'boost_pressure_b_control_status',
    },
    "VG_TURBO_CONTROL": {
        0: 'commanded_vgt_a_position_supported',
        1: 'vgt_a_position_supported',
        2: 'vgt_a_control_status_supported',
        3: 'commanded_vgt_b_position_supported',
        4: 'vgt_b_position_supported',
        5: 'vgt_b_control_status_supported',
        6: 'commanded_vgt_a_position',
        7: 'vgt_a_position',
        8: 'commanded_vgt_b_position',
        9: 'vgt_b_position',
        10: 'vgt_a_control_status',
        11: 'vgt_b_control_status',
    },
    "WASTEGATE_CONTROL": {
        0: 'commanded_wastegate_a_position_supported',
        1: 'wastegate_a_position_supported',
        2: 'commanded_wastegate_b_position_supported',
        3: 'wastegate_b_position_supported',
        4: 'commanded_wastegate_a_position',
        5: 'wastegate_a_position',
        6: 'commanded_wastegate_b_position',
        7: 'wastegate_b_position',
    },
    "EXHAUST_PRESSURE": {
        0: 'exhaust_pressure_sensor_bank_1_supported',
        1: 'exhaust_pressure_sensor_bank_2_supported',
        2: 'exhaust_pressure_sensor_bank_1',
        3: 'exhaust_pressure_sensor_bank_2',
    },
    "TURBO_RPM": {
        0: 'turbo_a_rpm_supported',
        1: 'turbo_b_rpm_supported',
        2: 'turbo_a_rpm',
        3: 'turbo_b_rpm',
    },
    "TURBO_A_TEMP": {
        0: 'turbo_compressor_inlet_temperature_supported',
        1: 'turbo_compressor_outlet_temperature_supported',
        2: 'turbo_turbine_inlet_temperature_supported',
        3: 'turbo_turbine_outlet_temperature_supported',
        4: 'turbo_compressor_inlet_temperature',
        5: 'turbo_compressor_outlet_temperature',
        6: 'turbo_turbine_inlet_temperature',
        7: 'turbo_turbine_outlet_temperature',
    },
    "TURBO_B_TEMP": {
        0: 'turbo_compressor_inlet_temperature_supported',
        1: 'turbo_compressor_outlet_temperature_supported',
        2: 'turbo_turbine_inlet_temperature_supported',
        3: 'turbo_turbine_outlet_temperature_supported',
        4: 'turbo_compressor_inlet_temperature',
        5: 'turbo_compressor_outlet_temperature',
        6: 'turbo_turbine_inlet_temperature',
        7: 'turbo_turbine_outlet_temperature',
    },
    "CACT": {
        0: 'cact_bank_1_sensor_1_supported',
        1: 'cact_bank_1_sensor_2_supported',
        2: 'cact_bank_2_sensor_1_supported',
        3: 'cact_bank_2_sensor_2_supported',
        4: 'cact_bank_1_sensor_1',
        5: 'cact_bank_1_sensor_2',
        6: 'cact_bank_2_sensor_1',
        7: 'cact_bank_2_sensor_2',
    },
    "EGT_BANK_1": {
        0: 'egt_sensor_1_supported',
        1: 'egt_sensor_2_supported',
        2: 'egt_sensor_3_supported',
        3: 'egt_sensor_4_supported',
        4: 'egt_sensor_1',
        5: 'egt_sensor_2',
        6: 'egt_sensor_3',
        7: 'egt_sensor_4',
    },
    "EGT_BANK_2": {
        0: 'egt_sensor_1_supported',
        1: 'egt_sensor_2_supported',
        2: 'egt_sensor_3_supported',
        3: 'egt_sensor_4_supported',
        4: 'egt_sensor_1',
        5: 'egt_sensor_2',
        6: 'egt_sensor_3',
        7: 'egt_sensor_4',
    },
    "DPF_BANK_1": {
        0: 'delta_pressure_supported',
        1: 'inlet_pressure_supported',
        2: 'outlet_pressure_supported',
        3: 'delta_pressure',
        4: 'inlet_pressure',
        5: 'outlet_pressure',
    },
    "DPF_BANK_2": {
        0: 'delta_pressure_supported',
        1: 'inlet_pressure_supported',
        2: 'outlet_pressure_supported',
        3: 'delta_pressure',
        4: 'inlet_pressure',
        5: 'outlet_pressure',
    },
    "DPF_TEMP": {
        0: 'bank_1_inlet_temp_supported',
        1: 'bank_1_outlet_temp_supported',
        2: 'bank_2_inlet_temp_supported',
        3: 'bank_2_outlet_temp_supported',
        4: 'bank_1_inlet_temp',
        5: 'bank_1_outlet_temp',
        6: 'bank_2_inlet_temp',
        7: 'bank_2_outlet_temp',
    },
    "NOX_NTE_STATUS": {
        0: 'inside_control_area',
        1: 'outside_control_area',
        2: 'inside_mgfr_nte_carve_out_area',
        3: 'active_area_nte_deficiency',
    },
    "NOX_NTE_STATUS": {
        0: 'inside_control_area',
        1: 'outside_control_area',
        2: 'inside_mgfr_nte_carve_out_area',
        3: 'active_area_nte_deficiency',
    },
    "ENGINE_RUN_TIME": {
        0: 'total_engine_run_time',
        1: 'total_idle_run_time',
        2: 'total_pto_run_time',
    },
    "ENGINE_RUN_TIME_AECD_1": {
        0: 'total_run_time_with_ei_aecd_1_active_supported',
        1: 'total_run_time_with_ei_aecd_2_active_supported',
        2: 'total_run_time_with_ei_aecd_3_active_supported',
        3: 'total_run_time_with_ei_aecd_4_active_supported',
        4: 'total_run_time_with_ei_aecd_5_active_supported',
        5: 'total_run_time_with_ei_aecd_1_active_timer_1',
        6: 'total_run_time_with_ei_aecd_1_active_timer_2',
        7: 'total_run_time_with_ei_aecd_2_active_timer_1',
        8: 'total_run_time_with_ei_aecd_2_active_timer_2',
        9: 'total_run_time_with_ei_aecd_3_active_timer_1',
        10: 'total_run_time_with_ei_aecd_3_active_timer_2',
        11: 'total_run_time_with_ei_aecd_4_active_timer_1',
        12: 'total_run_time_with_ei_aecd_4_active_timer_2',
        13: 'total_run_time_with_ei_aecd_5_active_timer_1',
        14: 'total_run_time_with_ei_aecd_5_active_timer_2',
    },
    "ENGINE_RUN_TIME_AECD_2": {
        0: 'total_run_time_with_ei_aecd_6_active_supported',
        1: 'total_run_time_with_ei_aecd_7_active_supported',
        2: 'total_run_time_with_ei_aecd_8_active_supported',
        3: 'total_run_time_with_ei_aecd_9_active_supported',
        4: 'total_run_time_with_ei_aecd_10_active_supported',
        5: 'total_run_time_with_ei_aecd_6_active_timer_1',
        6: 'total_run_time_with_ei_aecd_6_active_timer_2',
        7: 'total_run_time_with_ei_aecd_7_active_timer_1',
        8: 'total_run_time_with_ei_aecd_7_active_timer_2',
        9: 'total_run_time_with_ei_aecd_8_active_timer_1',
        10: 'total_run_time_with_ei_aecd_8_active_timer_2',
        11: 'total_run_time_with_ei_aecd_9_active_timer_1',
        12: 'total_run_time_with_ei_aecd_9_active_timer_2',
        13: 'total_run_time_with_ei_aecd_10_active_timer_1',
        14: 'total_run_time_with_ei_aecd_10_active_timer_2',
    },
    "NOX_SENSOR": {
        0: 'concentration_bank_1_sensor_1_supported',
        1: 'concentration_bank_1_sensor_2_supported',
        2: 'concentration_bank_2_sensor_1_supported',
        3: 'concentration_bank_2_sensor_2_supported',
        4: 'concentration_bank_1_sensor_1_data_availability',
        5: 'concentration_bank_1_sensor_2_data_availability',
        6: 'concentration_bank_2_sensor_1_data_availability',
        7: 'concentration_bank_2_sensor_2_data_availability',
        8: 'concentration_bank_1_sensor_1_data',
        9: 'concentration_bank_1_sensor_2_data',
        10: 'concentration_bank_2_sensor_1_data',
        11: 'concentration_bank_2_sensor_2_data',
    },
    "NOX_SYSTEM": {
        0: 'average_reagent_consumption_support',
        1: 'average_demanded_reagent_consumption_support',
        2: 'reagent_tank_level_supported',
        3: 'minutes_engine_run_while_nox_warning_mode_is_activated_support',
        4: 'average_reagent_consumption',
        5: 'average_demanded_reagent_consumption',
        6: 'reagent_tank_level',
        7: 'minutes_engine_run_while_nox_warning_mode_is_activated',
    },
    "PARTICULATE_MATTER": {
        0: 'mass_concentration_bank_1_sensor_1_supported',
        1: 'mass_concentration_bank_2_sensor_1_supported',
        2: 'mass_concentration_bank_1_sensor_1',
        3: 'mass_concentration_bank_2_sensor_1',
    },
    "INTAKE_MANIFOLD_PRESSURE": {
        0: 'pressure_a_supported',
        1: 'pressure_b_supported',
        2: 'pressure_a',
        3: 'pressure_b',
    },
    "SCR_INDUCEMENT_SYSTEM": {
        0: 'empty_reagent_tank_actual_state',
        1: 'incorrect_reagent_actual_state',
        2: 'deviation_of_reagent_consumption_actual_state',
        3: 'nox_emission_too_high_actual_state',
        4: 'inducement_system_active_actual_state',
        5: 'history_10k_reagent_level_low',
        6: 'history_10k_incorrect_reagent',
        7: 'history_10k_reagent_consumption_deviation',
        8: 'history_10k_nox_emissions_too_high',
        9: 'history_20k_reagent_level_low',
        10: 'history_20k_incorrect_reagent',
        11: 'history_20k_reagent_consumption_deviation',
        12: 'history_20k_nox_emissions_too_high',
        13: 'history_30k_reagent_level_low',
        14: 'history_30k_incorrect_reagent',
        15: 'history_30k_reagent_consumption_deviation',
        16: 'history_30k_nox_emissions_too_high',
        17: 'history_40k_reagent_level_low',
        18: 'history_40k_incorrect_reagent',
        19: 'history_40k_reagent_consumption_deviation',
        20: 'history_40k_nox_emissions_too_high',
        21: 'current_10k_block_inducement_system_active_distance',
        22: 'current_10k_block_distance',
        23: 'current_20k_block_inducement_system_active_distance',
        24: 'current_30k_block_inducement_system_active_distance',
        25: 'current_40k_block_inducement_system_active_distance',
    },
    "ENGINE_RUN_TIME_AECD_3": {
        0: 'total_run_time_with_ei_aecd_11_active_supported',
        1: 'total_run_time_with_ei_aecd_12_active_supported',
        2: 'total_run_time_with_ei_aecd_13_active_supported',
        3: 'total_run_time_with_ei_aecd_14_active_supported',
        4: 'total_run_time_with_ei_aecd_15_active_supported',
        5: 'total_run_time_with_ei_aecd_11_active_timer_1',
        6: 'total_run_time_with_ei_aecd_11_active_timer_2',
        7: 'total_run_time_with_ei_aecd_12_active_timer_1',
        8: 'total_run_time_with_ei_aecd_12_active_timer_2',
        9: 'total_run_time_with_ei_aecd_13_active_timer_1',
        10: 'total_run_time_with_ei_aecd_13_active_timer_2',
        11: 'total_run_time_with_ei_aecd_14_active_timer_1',
        12: 'total_run_time_with_ei_aecd_14_active_timer_2',
        13: 'total_run_time_with_ei_aecd_15_active_timer_1',
        14: 'total_run_time_with_ei_aecd_15_active_timer_2',
    },
    "ENGINE_RUN_TIME_AECD_4": {
        0: 'total_run_time_with_ei_aecd_16_active_supported',
        1: 'total_run_time_with_ei_aecd_17_active_supported',
        2: 'total_run_time_with_ei_aecd_18_active_supported',
        3: 'total_run_time_with_ei_aecd_19_active_supported',
        4: 'total_run_time_with_ei_aecd_20_active_supported',
        5: 'total_run_time_with_ei_aecd_16_active_timer_1',
        6: 'total_run_time_with_ei_aecd_16_active_timer_2',
        7: 'total_run_time_with_ei_aecd_17_active_timer_1',
        8: 'total_run_time_with_ei_aecd_17_active_timer_2',
        9: 'total_run_time_with_ei_aecd_18_active_timer_1',
        10: 'total_run_time_with_ei_aecd_18_active_timer_2',
        11: 'total_run_time_with_ei_aecd_19_active_timer_1',
        12: 'total_run_time_with_ei_aecd_19_active_timer_2',
        13: 'total_run_time_with_ei_aecd_20_active_timer_1',
        14: 'total_run_time_with_ei_aecd_20_active_timer_2',
    },
    "AFTERTREATMENT_STATUS": {
        0: 'particulate_filter_regeneration_status_supported',
        1: 'particulate_filter_regeneration_type_supported',
        2: 'nox_absorber_regeneration_status_supported',
        3: 'nox_absorber_desulfurization_status_supported',
        4: 'particulate_filter_regeneration_normalized_trigger_supported',
        5: 'particulate_filter_regeneration_average_time_supported',
        6: 'particulate_filter_regeneration_average_distance_supported',
        7: 'particulate_filter_regeneration_status',
        8: 'particulate_filter_regeneration_type',
        9: 'nox_absorber_regeneration_status',
        10: 'nox_absorber_desulfurization_type',
        11: 'particulate_filter_regeneration_normalized_trigger',
        12: 'particulate_filter_regeneration_average_time',
        13: 'particulate_filter_regeneration_average_distance',
    },
    "O2_SENSOR_WIDE": {
        0: 'o2_sensor_concentration_bank_1_sensor_1_supported',
        1: 'o2_sensor_concentration_bank_1_sensor_2_supported',
        2: 'o2_sensor_concentration_bank_2_sensor_1_supported',
        3: 'o2_sensor_concentration_bank_2_sensor_2_supported',
        4: 'o2_sensor_lambda_bank_1_sensor_1_supported',
        5: 'o2_sensor_lambda_bank_1_sensor_2_supported',
        6: 'o2_sensor_lambda_bank_2_sensor_1_supported',
        7: 'o2_sensor_lambda_bank_2_sensor_2_supported',
        8: 'o2_sensor_concentration_bank_1_sensor_1',
        9: 'o2_sensor_concentration_bank_1_sensor_2',
        10: 'o2_sensor_concentration_bank_2_sensor_1',
        11: 'o2_sensor_concentration_bank_2_sensor_2',
        12: 'o2_sensor_lambda_bank_1_sensor_1',
        13: 'o2_sensor_lambda_bank_1_sensor_2',
        14: 'o2_sensor_lambda_bank_2_sensor_1',
        15: 'o2_sensor_lambda_bank_2_sensor_2',
    },
    "PM_SENSOR_OUTPUT": {
        0: 'operating_status_bank_1_sensor_1_supported',
        1: 'signal_bank_1_sensor_1_supported',
        2: 'operating_status_bank_2_sensor_1_supported',
        3: 'signal_bank_1_sensor_2_supported',
        4: 'active_status_bank_1_sensor_1',
        5: 'regen_status_bank_1_sensor_1',
        6: 'active_status_bank_2_sensor_1',
        7: 'regen_status_bank_2_sensor_1',
        8: 'normalized_output_value_bank_1_sensor_1',
        9: 'normalized_output_value_bank_2_sensor_1',
    },
    "WWH_OBD_SYSTEM_INFO": {
        0: 'display_strategy',
        1: 'malfunction_indicator_status',
        2: 'emission_system_readiness',
        3: 'operating_hours_with_malfunction_indicator_on',
    },
    "WWH_OBD_ECU_INFO": {
        0: 'ecu_malfunction_indication_status',
        1: 'operating_hours_with_malfunction_indicator_on',
        2: 'highest_b1_counter',
    },
    "FUEL_SYSTEM_STATUS": {
        0: 'fuel_pressure_control_1_supported',
        1: 'fuel_injection_quantity_control_1_supported',
        2: 'fuel_injection_timing_control_1_supported',
        3: 'idle_fuel_balance_contribution_control_1_supported',
        4: 'fuel_pressure_control_2_supported',
        5: 'fuel_injection_quantity_control_2_supported',
        6: 'fuel_injection_timing_control_2_supported',
        7: 'idle_fuel_balance_contribution_control_2_supported',
        8: 'fuel_pressure_control_1_status',
        9: 'fuel_injection_quantity_control_1_status',
        10: 'fuel_injection_timing_control_1_status',
        11: 'idle_fuel_balance_contribution_control_1_status',
        12: 'fuel_pressure_control_2_status',
        13: 'fuel_injection_quantity_control_2_status',
        14: 'fuel_injection_timing_control_2_status',
        14: 'idle_fuel_balance_contribution_control_2_status',
    },
    "WWH_OBD_VEHICLE_INFO": {
        0: 'cumulative_continuous_malfunction_indicator_counter_supported',
        1: 'cumulative_continuous_malfunction_indicator_counter',
    },
    "NOX_CONTROL_INFO": {
        0: 'nox_warning_system_activation_status_supported',
        1: 'reagent_quality_counter_supported',
        2: 'reagent_consumption_counter_supported',
        3: 'absence_of_reagent_dosing_counter_supported',
        4: 'egr_valve_counter_supported',
        5: 'malfunction_of_nox_control_monitoring_system_counter_supported',
        6: 'nox_warning_system_activation_status',
        7: 'level_1_inducement_status',
        8: 'level_2_inducement_status',
        9: 'level_3_inducement_status',
        10: 'reagent_quality_counter',
        11: 'reagent_consumption_counter',
        12: 'dosing_activity_counter',
        13: 'egr_valve_counter',
        14: 'monitoring_system_counter',
    },
    "SCR_CATALYST_STORAGE": {
        0: 'target_scr_catalyst_nh3_storage_a_supported',
        1: 'actual_modelled_scr_catalyst_nh3_storage_a_supported',
        2: 'target_scr_catalyst_nh3_storage_b_supported',
        3: 'actual_modelled_scr_catalyst_nh3_storage_b_supported',
        4: 'target_scr_catalyst_nh3_storage_a',
        5: 'actual_modelled_scr_catalyst_nh3_storage_a',
        6: 'target_scr_catalyst_nh3_storage_b',
        7: 'actual_modelled_scr_catalyst_nh3_storage_b',
    },
    "HYDROCARBON_DOSER": {
        0: 'hydrocarbon_doser_flow_rate_supported',
        1: 'hydrocarbon_doser_injector_duty_cycle_supported',
        2: 'aftertreatment_fuel_pressure_supported',
        3: 'hydrocarbon_doser_flow_rate',
        4: 'hydrocarbon_doser_injector_duty_cycle',
        5: 'aftertreatment_fuel_pressure',
    },
    "NOX_EMISSION_RATE": {
        0: 'engine_out_support',
        1: 'tailpipe_support',
        2: 'engine_out',
        3: 'tailpipe',
    },
    "EXHAUST_GAS_TEMP_BANK_1": {
        0: 'sensor_5_supported',
        1: 'sensor_6_supported',
        2: 'sensor_7_supported',
        3: 'sensor_8_supported',
        4: 'sensor_5',
        5: 'sensor_6',
        6: 'sensor_7',
        7: 'sensor_8',
    },
    "EXHAUST_GAS_TEMP_BANK_2": {
        0: 'sensor_5_supported',
        1: 'sensor_6_supported',
        2: 'sensor_7_supported',
        3: 'sensor_8_supported',
        4: 'sensor_5',
        5: 'sensor_6',
        6: 'sensor_7',
        7: 'sensor_8',
    },
    "HYBRID_EV_DATA": {
        0: 'battery_charging_state_supported',
        1: 'battery_voltage_supported',
        2: 'battery_current_supported',
        3: 'enhanced_battery_charging_state_supported',
        4: 'battery_charging_state',
        5: 'enhanced_battery_charging_state',
        6: 'battery_voltage',
        7: 'battery_current',
    },
    "DEF_SENSOR": {
        0: 'def_type_supported',
        1: 'def_concentration_supported',
        2: 'def_temp_supported',
        3: 'def_level_supported',
        4: 'def_type',
        5: 'def_concentration',
        6: 'def_temp',
        7: 'def_level',
    },
    "O2_SENSOR_WIDE_RANGE": {
        0: 'concentration_bank_1_sensor_3_supported',
        1: 'concentration_bank_1_sensor_4_supported',
        2: 'concentration_bank_2_sensor_3_supported',
        3: 'concentration_bank_2_sensor_4_supported',
        4: 'lambda_bank_1_sensor_3_supported',
        5: 'lambda_bank_1_sensor_4_supported',
        6: 'lambda_bank_2_sensor_3_supported',
        7: 'lambda_bank_2_sensor_4_supported',
        8: 'concentration_bank_1_sensor_3',
        9: 'concentration_bank_1_sensor_4',
        10: 'concentration_bank_2_sensor_3',
        11: 'concentration_bank_2_sensor_4',
        12: 'lambda_bank_1_sensor_3',
        13: 'lambda_bank_1_sensor_4',
        14: 'lambda_bank_2_sensor_3',
        15: 'lambda_bank_2_sensor_4',
    },
    "FUEL_SYSTEM": {
        0: 'a_bank_1_supported',
        1: 'b_bank_1_supported',
        2: 'a_bank_2_supported',
        3: 'b_bank_2_supported',
        4: 'a_bank_3_supported',
        5: 'b_bank_3_supported',
        6: 'a_bank_4_supported',
        7: 'b_bank_4_supported',
        8: 'a_bank_1',
        9: 'b_bank_1',
        10: 'a_bank_2',
        11: 'b_bank_2',
        12: 'a_bank_3',
        13: 'b_bank_3',
        14: 'a_bank_4',
        15: 'b_bank_4',
    },
    "NOX_SENSOR_CORRECTED": {
        0: 'concentration_bank_1_sensor_1_supported',
        1: 'concentration_bank_1_sensor_2_supported',
        2: 'concentration_bank_2_sensor_1_supported',
        3: 'concentration_bank_2_sensor_2_supported',
        4: 'concentration_bank_1_sensor_1_data_availability',
        5: 'concentration_bank_1_sensor_2_data_availability',
        6: 'concentration_bank_2_sensor_1_data_availability',
        7: 'concentration_bank_2_sensor_2_data_availability',
        8: 'concentration_bank_1_sensor_1',
        9: 'concentration_bank_1_sensor_2',
        10: 'concentration_bank_2_sensor_1',
        11: 'concentration_bank_2_sensor_2',
    },
    "EVAP_SYS_VAPOR_PRESSURE": {
        0: 'esvp_a_supported',
        1: 'esvp_a_wide_range_supported',
        2: 'esvp_b_supported',
        3: 'esvp_b_wide_range_supported',
        4: 'esvp_a',
        5: 'esvp_a_wide_range',
        6: 'esvp_b',
        7: 'esvp_b_wide_range',
    },
    "DEF_DOSING": {
        0: 'commanded_def_dosing_supported',
        1: 'def_usage_supported',
        2: 'commanded_def_dosing',
        3: 'def_usage',
    },
    "NOX_SENSOR_2": {
        0: 'concentration_bank_1_sensor_3_supported',
        1: 'concentration_bank_1_sensor_4_supported',
        2: 'concentration_bank_2_sensor_3_supported',
        3: 'concentration_bank_2_sensor_4_supported',
        4: 'concentration_bank_1_sensor_3_data_availability',
        5: 'concentration_bank_1_sensor_4_data_availability',
        6: 'concentration_bank_2_sensor_3_data_availability',
        7: 'concentration_bank_2_sensor_4_data_availability',
        8: 'concentration_bank_1_sensor_3',
        9: 'concentration_bank_1_sensor_4',
        10: 'concentration_bank_2_sensor_3',
        11: 'concentration_bank_2_sensor_4',
    },
    "NOX_SENSOR_CORRECTED_2": {
        0: 'concentration_bank_1_sensor_3_supported',
        1: 'concentration_bank_1_sensor_4_supported',
        2: 'concentration_bank_2_sensor_3_supported',
        3: 'concentration_bank_2_sensor_4_supported',
        4: 'concentration_bank_1_sensor_3_data_availability',
        5: 'concentration_bank_1_sensor_4_data_availability',
        6: 'concentration_bank_2_sensor_3_data_availability',
        7: 'concentration_bank_2_sensor_4_data_availability',
        8: 'concentration_bank_1_sensor_3',
        9: 'concentration_bank_1_sensor_4',
        10: 'concentration_bank_2_sensor_3',
        11: 'concentration_bank_2_sensor_4',
    },
    "MOTORCYCLE_IO_STATUS": {
        0: 'abs_disable_switch_supported',
        1: 'abs_disable_switch_state',
    },
    "ALTERNATIVE_FUEL": {
        0: 'alternative_fuel_rail_pressure_supported',
        1: 'alternative_fuel_rail_temperature_supported',
        2: 'alternative_fuel_tank_pressure_supported',
        3: 'alternative_fuel_tank_pressure_wide_range_supported',
        4: 'alternative_fuel_tank_temperature_supported',
        5: 'alternative_fuel_rail_pressure',
        6: 'alternative_fuel_rail_temperature',
        7: 'alternative_fuel_tank_pressure',
        8: 'alternative_fuel_tank_pressure_wide_range',
        9: 'alternative_fuel_tank_temperature',
    },
    "MAX_DEF_RATE": {
        0: 'dosing_mode_supported',
        1: 'max_dosing_rate_supported',
        2: 'dosing_mode',
        3: 'max_dosing_rate',
    },
    "CRANKCASE_VENTILATION": {
        0: 'presssure_sensor_supported',
        1: 'centrifugal_oil_separator_rpm_supported',
        2: 'presssure_sensor',
        3: 'centrifugal_oil_separator_rpm',
    },
    "EVAP_PURGE_PRESSURE": {
        0: 'pressure_supported',
        1: 'pressure_wide_range_supported',
        2: 'pressure',
        3: 'pressure_wide_range',
    },
    "EGR_AIR_FLOW": {
        0: 'mass_flow_rate_a_supported',
        1: 'mass_flow_rate_b_supported',
        2: 'mass_flow_rate_a',
        3: 'mass_flow_rate_b',
    },
    "VEHICLE_OPERATION_DATA": {
        0: 'recent_distance_traveled',
        1: 'lifetime_distance_traveled',
        2: 'recent_fuel_consumed',
        3: 'lifetime_fuel_consumed',
    },
}

def get_list_command_name(command_name:str, obd_response_index:int)->str:
    """
    OBD commands can return lists of results.
    These results need to be handled as their own output.
    This function creates variations on command_name based
    on the index value or based on a dictionary lookup using
    the index value.
    """
    if (
        command_name in COMMANDS_RETURNING_LIST_RESULTS and
        obd_response_index in COMMANDS_RETURNING_LIST_RESULTS[command_name]
        ):
        return f"{command_name}-{COMMANDS_RETURNING_LIST_RESULTS[command_name][obd_response_index]}"

    return f"{command_name}-{obd_response_index:0>2d}"

def base_command_name_filter(command_name:str, commands:list) -> bool:
    """
    Given a command name, see if the command name is the base command name
    for one of the commands in the list.  If it is, return True otherwise False
    """
    return any(get_base_command_name(command) == command_name for command in commands)

def get_base_command_name(command_name:str) -> str:
    """
    GPS and OBD commands can return lists or dictionaries of results.
    These field names within the results are used to create field names
    in a format like "NMEA_GNGNS-lat" where "NMEA_GNGNS" is the root
    command name and "lat" is the field name.
    """
    return (command_name.split("-"))[0] if "-" in command_name else command_name

def get_field_names(command_names:list)->list:
    # sourcery skip: for-append-to-extend
    """
    from a list of commands, return the list of field names understanding that
    some commands will have multiple field names.
    """
    field_names = []
    for command_name in command_names:
        field_names.append(command_name)
        if command_name in COMMANDS_RETURNING_LIST_RESULTS:
            for key, value in COMMANDS_RETURNING_LIST_RESULTS[command_name].items():
                field_names.append(f"{command_name}-{value}")

    return field_names

def pint_to_value_type(obd_response_value:str, verbose:bool=False):
    # sourcery skip: hoist-repeated-if-condition, remove-unnecessary-else, simplify-empty-collection-comparison, simplify-len-comparison, simplify-str-len-comparison, swap-if-else-branches
    """Returns a workable obd_response_value.
       When obd_response_values are numeric, they are expressed as
        - number, 
        - single space and
        - units,
       they will be translated to just a number.
       Sometimes obd_response_values are 'no response' in which case
       they will be replaced with None.
       Other times obd_response_values will be a string which may or may not
       contain commas.  In this case, the string will be wrapped with double
       quotes.
       In some cases a string will have a null character in it in which case
       the null character will be deleted from the string.
    """
    if obd_response_value is None or isinstance(obd_response_value, list) or isinstance(obd_response_value, dict):
        return None, None

    if obd_response_value in {'no response', 'not supported'}:
        return None, None

    if verbose:
        print(f"pint_to_value_type obd_response_value: {type(obd_response_value)}, {obd_response_value}", file=stderr)

    # Test to see if this is a pure number
    if isinstance(obd_response_value, str):
        with contextlib.suppress(ValueError):
            numeric_value = int(obd_response_value)
            return numeric_value, None
        with contextlib.suppress(ValueError):
            numeric_value = float(obd_response_value)
            return numeric_value, None

    # Test to see if this is a boolean
    if isinstance(obd_response_value, str) and obd_response_value.lower() in {"true"}:
        return True, None
    if isinstance(obd_response_value, str) and obd_response_value.lower() in {"false"}:
        return False, None

    if (
        isinstance(obd_response_value, int) or
        isinstance(obd_response_value, float) or
        isinstance(obd_response_value, bool)
    ):
        return obd_response_value, None

    if isinstance(obd_response_value, str) and len(obd_response_value) == 0:
        return None, None

    # Test to see if this is just a string and not a pint value: {numeric value}<SPACE>{non-numeric value}
    if isinstance(obd_response_value, str) and len(obd_response_value.strip().split(" ")) <= 1:
        # not a pint value
        if chr(0) in obd_response_value:
            # string contains null value
            return obd_response_value.replace(chr(0), ''), None
        return obd_response_value, None

    try:
        pint_value = unit_registry(obd_response_value)
    except UndefinedUnitError:
        return obd_response_value, None
    except OffsetUnitCalculusError as e:
        if verbose:
            print(f"Pint unit_registry error on {obd_response_value}. " +
                f"Returning \"{(obd_response_value.split())[0]}\" as value. " +
                f"OffsetUnitCalculusError: {e}", file=stderr)
        # hack
        value, non_value = pint_to_value_type(obd_response_value.split()[0])
        return value, obd_response_value.split()[1]
    except ValueError as e:
        if verbose:
            print(f"Pint unit_registry error on {obd_response_value}. " +
            f"Returning \"{obd_response_value}\" as value. " +
            f"ValueError: {e}", file=stderr)
        return obd_response_value, None
    except AttributeError as e:
        if verbose:
            print(f"Pint unit_registry error on {obd_response_value}. ",
                    f"AttributeError: {e}", file=stderr)
        return obd_response_value, None

    try:
        value, units = pint_value.to_tuple()
    except AttributeError as e:
        if verbose:
            print(f"Pint to_tuple error on {obd_response_value}. ",
                    f"AttributeError: {e}", file=stderr)
        return pint_value, None

    if verbose:
        print(f"response_value {pint_value} value {value} units {units}", file=stderr)

    if len(units) == 0:
        return value, 'dimensionless'

    return value, units[0][0]

def command_name_to_mode_pid_mapping():
    """
    creates mapping between command names and mode/pid pairs
    """
    for cmd in __mode9__ + __mode1__ + NEW_COMMANDS:
        if cmd.name in COMMAND_TO_MODE_PID:
            raise ValueError(f"Duplicate Command: {cmd.name}")
        mode = (cmd.command.decode('utf-8'))[:2]
        pid = (cmd.command.decode('utf-8'))[2:4]
        COMMAND_TO_MODE_PID[cmd.name] = (mode, pid, )
        if cmd.command in MODE_PID_TO_COMMAND:
            raise ValueError(f"Duplicate mode/pid pair ({mode}, {pid}) for ",
            f"{MODE_PID_TO_COMMAND[cmd.command]} and {cmd.name}")
        MODE_PID_TO_COMMAND[cmd.command] = cmd.name
    
    # Pseudo command names e.g. ELM_VERSION
    for index, command_name in enumerate(PSEUDO_COMMANDS):
        if command_name in COMMAND_TO_MODE_PID:
            raise ValueError(f"Duplicate Command: {command_name}")
        COMMAND_TO_MODE_PID[command_name] = ('00', f"{index:2}", )
        MODE_PID_TO_COMMAND[f"00{index:2}"] = command_name

def get_mode_pid_from_command_name(command_name:str)->tuple:
    """given an OBD command name, return the mode and PID as a tuple.
    """
    if len(COMMAND_TO_MODE_PID) < 1:
        command_name_to_mode_pid_mapping()

    if '-' in command_name:
        # Multiple Values Per OBD command response
        command_name = (command_name.split('-'))[0]

    if command_name not in COMMAND_TO_MODE_PID and command_name not in PSEUDO_COMMANDS:
        raise ValueError(f"{command_name} not in {COMMAND_TO_MODE_PID}")

    return COMMAND_TO_MODE_PID[command_name]

