#!/usr/bin/env python
# coding: utf-8

# # Acceleration Study 1 - Acceleration Statistics
# 
# This notebook uses data generated by
# 
# - Notebook ```Gear-Study-1```
# 
# and stored by ```vehicle-telemetry-system/src/telemetry_analysis/gears.py```
# 
# - ```from telemetry_analysis.common import temporary_file_base_directory```
# - ```f"{temporary_file_base_directory}/Gear-Study/Gear-Study-{vin}.csv"```
# 
# ## Acceleration Calculation
# 
# Acceleration calculated as
# 
# - ```(SPEED<sub>i+1</sub> - SPEED<sub>i</sub>) / (iso_ts_pre<sub>i+1</sub> - iso_ts_pre<sub>i</sub>)```
# 
# ## Conversion
# 
# To convert this Jupyter Notebook to Markdown, run:
# 
# - ```python -m nbconvert --to=markdown --output-dir=../markdown Acceleration-Study-1.ipynb```
# 
# To convert this Jupyter Notebook to Python code, run:
# 
# - ```python -m nbconvert --to=python --output-dir=../notebook-src Acclerations-Study-1.ipynb```
# 

# In[1]:


# Increase Jupyter Notebook display width to be the screen width
from IPython.display import display, HTML
display(HTML("<style>.container { width:100% !important; }</style>"))
display(HTML("<style>.output_result { max-width:100% !important; }</style>"))

# Enable imports relative to notebook
# https://mattoppenheim.com/2018/03/16/relative-imports-in-jupyter-notebooks/
# python -m pip install nbimporter
# conda install -c akode nbimporter
import nbimporter


# In[2]:


import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)

import ipywidgets as widgets
from datetime import datetime, timedelta, timezone
import pytz
import sys
import csv
from pathlib import Path
import numpy as np
import pandas as pd
from os import linesep as LF

import matplotlib.pyplot as plt

# pip install rich
from rich.console import Console


# In[3]:


# Set Raspberry Pi zimezone
# See https://en.wikipedia.org/wiki/List_of_tz_database_time_zones  for list of timezone strings
rpi_timezone = pytz.timezone('US/Central')
telemetry_obd_sys_timezone = pytz.timezone('US/Central')

np.set_printoptions(linewidth=180)
pd.set_option("display.max.columns", None)

console = Console(width=140)


# In[4]:


# Enable imports from telemetry-analysis
for path in [str(Path.cwd().parent / Path("src")), ]:
    print(f"Adding to Python Path: {path}")
    sys.path.append(path)

from private.vehicles import vehicles
from telemetry_analysis.vins import fake_vin
from telemetry_analysis.theta import read_theta_data_file, theta_file_name
from telemetry_analysis.common import temporary_file_base_directory

from telemetry_analysis.widgets import select_vin_dialog
from telemetry_analysis.reports import (
    obd_log_evaluation_report,
    basic_statistics,
    generate_basic_stats_report,
    plot_color_table,
)
from telemetry_analysis.gears import (
    save_gear_study_data_to_csv,
    generate_gear_study_data,
    gear_study_input_columns,
    gear_study_output_columns,
    gear_study_hexagonal_binning_chart,
    gear_study_rps_mps_kde_chart,
    gear_study_kde_extrema_chart,
    kde_plot_overlay_for_each_gear,
    gear_study_samples_by_closest_gear,
    gear_study_theta_histogram,
    error_rate_estimation,
    error_relationships,
    theta_error_local_maximums,
)
from telemetry_analysis.data_files import obd_to_csv


# In[5]:


vins = select_vin_dialog(verbose=True)

vehicle_names = [vehicles[vin]['name'] for vin in vins]

print(f"Data available as of {datetime.now()} from data sets: \n  - {(LF + '  - ').join(vehicle_names)}")


# In[6]:


# Write obd_gear_study_data[vin] to csv files
########################################################

for vin in vins:
    #   - Each vehicle file is written to a smaller temporary csv file using the same basename by obd_log_to_csv_main()
    #   - Each temporary vehicle file gets processed and added to obd_files with a unique route number by generate_gear_study_data()

    # obd_to_csv(vin, gear_study_input_columns)

    # obd_gear_study = generate_gear_study_data(f"{temporary_file_base_directory}/{vin}/gear", vin)

    # console.print(f"obd_gear_study data: {len(obd_gear_study)}")
    
    output_file_name = f"{temporary_file_base_directory}/Gear-Study/Gear-Study-{vin}.csv"
    # Path(output_file_name).parent.mkdir(parents=True, exist_ok=True)
    # save_gear_study_data_to_csv(vin, output_file_name, obd_gear_study, force_save=True)

    # laod csv file into dataframe
    console.print(f"Loading CSV file for {vehicles[vin]['name']} (Gear-Study-{fake_vin}.csv) into Data Frame")
    df = pd.read_csv(output_file_name, parse_dates=['iso_ts_pre', 'iso_ts_post', ])
    console.print(f"\t- rows loaded {df.shape[0]}")

    console.print(f"Acceleration Study Basic Statistics Report - {vehicles[vin]['name']}")
    
    generate_basic_stats_report(vin, df, ['acceleration', ])

    plt.hist(df['acceleration'], bins=100, log=True)
    plt.xlabel('Acceleration m/(s*s)')
    plt.ylabel('count')
    plt.title(f"Acceleration-Study-1 {vehicles[vin]['name']} Histogram", fontweight='bold')
    plt.show()

    plt.hist(df['acceleration'], bins=100, range=(-4.0, 4.0), log=True)
    plt.xlabel('Acceleration m/(s*s)')
    plt.ylabel('count')
    plt.title(f"Acceleration-Study-1 {vehicles[vin]['name']} Histogram", fontweight='bold')
    plt.show()

    plt.hist(df['acceleration'], bins=100, range=(-2.0, 2.0), log=True)
    plt.xlabel('Acceleration m/(s*s)')
    plt.ylabel('count')
    plt.title(f"Acceleration-Study-1 {vehicles[vin]['name']} Histogram", fontweight='bold')
    plt.show()

    plt.hist(df['acceleration'], bins=100, range=(-1.0, 1.0), log=True)
    plt.xlabel('Acceleration m/(s*s)')
    plt.ylabel('count')
    plt.title(f"Acceleration-Study-1 {vehicles[vin]['name']} Histogram", fontweight='bold')
    plt.show()

    plt.hist(df['acceleration'], bins=100, range=(-0.5, 0.5), log=True)
    plt.xlabel('Acceleration m/(s*s)')
    plt.ylabel('count')
    plt.title(f"Acceleration-Study-1 {vehicles[vin]['name']} Histogram", fontweight='bold')
    plt.show()

    plt.hist(df['acceleration'], bins=100, range=(-0.2, 0.2), log=True)
    plt.xlabel('Acceleration m/(s*s)')
    plt.ylabel('count')
    plt.title(f"Acceleration-Study-1 {vehicles[vin]['name']} Histogram", fontweight='bold')
    plt.show()

    plt.hist(df['acceleration'], bins=100, range=(-0.1, 0.1), log=True)
    plt.xlabel('Acceleration m/(s*s)')
    plt.ylabel('count')
    plt.title(f"Acceleration-Study-1 {vehicles[vin]['name']} Histogram", fontweight='bold')
    plt.show()


# In[ ]:




